# ICS Lab7 PartC
# A tricky solution

ncopy:
	mrmovl 4(%esp), %ebx	# src
	mrmovl 12(%esp), %edx	# len
	mrmovl 8(%esp), %ecx	# dst

Begin:
	rrmovl %edx, %ebp	# rst = len
	irmovl $0x7c, %esi	# msk = 0x7c

	addl %edx, %ebp
	addl %ebp, %ebp		# rst *= 4
	andl %esi, %ebp		# mask(rst, msk)

	mrmovl Jump(%ebp), %esi	# addr = Jump[rst]

	rrmovl %edx, %eax	# count = len;

	pushl %esi		# push addr
	ret			# address based jump

# Jump table
Jump:
	.long LoopChk
	.long x0
	.long x1
	.long x2
	.long x3
	.long x4
	.long x5
	.long x6
	.long x7
	.long x8
	.long x9
	.long x10
	.long x11
	.long x12
	.long x13
	.long x14
	.long x15
	.long x16
	.long x17
	.long x18
	.long x19
	.long x20
	.long x21
	.long x22
	.long x23
	.long x24
	.long x25
	.long x26
	.long x27
	.long x28
	.long x29
	.long x30

# Some of the following code is generated by code generator

LoopMain:
	addl %ebp, %ebx		# ebx += rst
	addl %ebp, %ecx		# ecx += rst
	irmovl $128, %ebp

x31:
	mrmovl 124(%ebx), %esi
	mrmovl 126(%ebx), %edi
	rmmovl %esi, 124(%ecx)
	addl %edi, %eax

x30:
	mrmovl 120(%ebx), %esi
	mrmovl 122(%ebx), %edi
	rmmovl %esi, 120(%ecx)
	addl %edi, %eax

x29:
	mrmovl 116(%ebx), %esi
	mrmovl 118(%ebx), %edi
	rmmovl %esi, 116(%ecx)
	addl %edi, %eax

x28:
	mrmovl 112(%ebx), %esi
	mrmovl 114(%ebx), %edi
	rmmovl %esi, 112(%ecx)
	addl %edi, %eax

x27:
	mrmovl 108(%ebx), %esi
	mrmovl 110(%ebx), %edi
	rmmovl %esi, 108(%ecx)
	addl %edi, %eax

x26:
	mrmovl 104(%ebx), %esi
	mrmovl 106(%ebx), %edi
	rmmovl %esi, 104(%ecx)
	addl %edi, %eax

x25:
	mrmovl 100(%ebx), %esi
	mrmovl 102(%ebx), %edi
	rmmovl %esi, 100(%ecx)
	addl %edi, %eax

x24:
	mrmovl 96(%ebx), %esi
	mrmovl 98(%ebx), %edi
	rmmovl %esi, 96(%ecx)
	addl %edi, %eax

x23:
	mrmovl 92(%ebx), %esi
	mrmovl 94(%ebx), %edi
	rmmovl %esi, 92(%ecx)
	addl %edi, %eax

x22:
	mrmovl 88(%ebx), %esi
	mrmovl 90(%ebx), %edi
	rmmovl %esi, 88(%ecx)
	addl %edi, %eax

x21:
	mrmovl 84(%ebx), %esi
	mrmovl 86(%ebx), %edi
	rmmovl %esi, 84(%ecx)
	addl %edi, %eax

x20:
	mrmovl 80(%ebx), %esi
	mrmovl 82(%ebx), %edi
	rmmovl %esi, 80(%ecx)
	addl %edi, %eax

x19:
	mrmovl 76(%ebx), %esi
	mrmovl 78(%ebx), %edi
	rmmovl %esi, 76(%ecx)
	addl %edi, %eax

x18:
	mrmovl 72(%ebx), %esi
	mrmovl 74(%ebx), %edi
	rmmovl %esi, 72(%ecx)
	addl %edi, %eax

x17:
	mrmovl 68(%ebx), %esi
	mrmovl 70(%ebx), %edi
	rmmovl %esi, 68(%ecx)
	addl %edi, %eax

x16:
	mrmovl 64(%ebx), %esi
	mrmovl 66(%ebx), %edi
	rmmovl %esi, 64(%ecx)
	addl %edi, %eax

x15:
	mrmovl 60(%ebx), %esi
	mrmovl 62(%ebx), %edi
	rmmovl %esi, 60(%ecx)
	addl %edi, %eax

x14:
	mrmovl 56(%ebx), %esi
	mrmovl 58(%ebx), %edi
	rmmovl %esi, 56(%ecx)
	addl %edi, %eax

x13:
	mrmovl 52(%ebx), %esi
	mrmovl 54(%ebx), %edi
	rmmovl %esi, 52(%ecx)
	addl %edi, %eax

x12:
	mrmovl 48(%ebx), %esi
	mrmovl 50(%ebx), %edi
	rmmovl %esi, 48(%ecx)
	addl %edi, %eax

x11:
	mrmovl 44(%ebx), %esi
	mrmovl 46(%ebx), %edi
	rmmovl %esi, 44(%ecx)
	addl %edi, %eax

x10:
	mrmovl 40(%ebx), %esi
	mrmovl 42(%ebx), %edi
	rmmovl %esi, 40(%ecx)
	addl %edi, %eax

x9:
	mrmovl 36(%ebx), %esi
	mrmovl 38(%ebx), %edi
	rmmovl %esi, 36(%ecx)
	addl %edi, %eax

x8:
	mrmovl 32(%ebx), %esi
	mrmovl 34(%ebx), %edi
	rmmovl %esi, 32(%ecx)
	addl %edi, %eax

x7:
	mrmovl 28(%ebx), %esi
	mrmovl 30(%ebx), %edi
	rmmovl %esi, 28(%ecx)
	addl %edi, %eax

x6:
	mrmovl 24(%ebx), %esi
	mrmovl 26(%ebx), %edi
	rmmovl %esi, 24(%ecx)
	addl %edi, %eax

x5:
	mrmovl 20(%ebx), %esi
	mrmovl 22(%ebx), %edi
	rmmovl %esi, 20(%ecx)
	addl %edi, %eax

x4:
	mrmovl 16(%ebx), %esi
	mrmovl 18(%ebx), %edi
	rmmovl %esi, 16(%ecx)
	addl %edi, %eax

x3:
	mrmovl 12(%ebx), %esi
	mrmovl 14(%ebx), %edi
	rmmovl %esi, 12(%ecx)
	addl %edi, %eax

x2:
	mrmovl 8(%ebx), %esi
	mrmovl 10(%ebx), %edi
	rmmovl %esi, 8(%ecx)
	addl %edi, %eax

x1:
	mrmovl 4(%ebx), %esi
	mrmovl 6(%ebx), %edi
	rmmovl %esi, 4(%ecx)
	addl %edi, %eax

x0:
	mrmovl 0(%ebx), %esi
	mrmovl 2(%ebx), %edi
	rmmovl %esi, 0(%ecx)
	addl %edi, %eax

LoopChk:
	iaddl $0xffffffe0, %edx	# len -= 32
	jl Fin			# if len < 0, finish
	jmp LoopMain

Fin:
	irmovl $0xffff, %ecx
	andl %ecx, %eax

	ret

End:
